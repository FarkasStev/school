package weatherbitmaps;

import java.awt.event.ActionEvent;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.Scanner;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

import weather.WeatherObserver;
import weather.io.WeatherDatumReader;

public abstract class WeatherBitmapsApplication extends app.JApplication
    implements java.awt.event.ActionListener
{
  public static int WIDTH = 600;
  public static int HEIGHT = 800;
  protected static String ABOUT = "About";
  protected static String LOAD = "Load";
  private JButton aboutButton;
  private JButton loadButton;
  protected JTextField fileField;
  private String aboutText;

  /**
   * The explicit value constructor is passed the command-line arguments. It must pass them to its
   * arent's constructor. It must then perform any necessary non-GUI-related initializations.
   * (Remember that GUI-related initializations must be performed in the init() method.).
   * 
   * @param args
   *          from command line
   */
  public WeatherBitmapsApplication(String[] args)
  {
    super(args, WIDTH, HEIGHT);

    try
    {
      File aboutFile = new File("about.txt");
      Scanner aboutScnr = new Scanner(aboutFile);
      String aboutString = "";
      
      while (aboutScnr.hasNext())
      {
        aboutString+= aboutScnr.nextLine();
      }
      aboutScnr.close();
      
      aboutText = aboutString;
    }
    catch (FileNotFoundException e)
    {
      System.out.println("Error: about.txt not found");
    }
    
    

  }

  /**
   * Must handle the events generated by the user clicking on the About and/or Load buttons. When
   * the user clicks on the About button, this method must invoke the handleAbout() method. When the
   * user clicks on the Load button, this method must invoke the handleLoad() method.
   * 
   */
  @Override
  public void actionPerformed(ActionEvent e)
  {
    if (e.getSource() == aboutButton)
    {
      handleAbout();
    }
    else if (e.getSource() == loadButton)
    {
      handleLoad();
    }

  }

  /**
   * The getGUIComponent() method is invoked when the application is being layed-out. In concrete
   * specializations, this method returns the "main" JComponent (e.g., the JComponent that is used
   * to display weather information).
   * 
   * @return
   */
  protected abstract JComponent getGUIComponent();

  /**
   * The getWeatherObserver() method is invoked when the application responds to the Load button. In
   * concrete specializations, this method returns the WeatherObserver that becomes the observer of
   * the WeatherSubject (i.e., the WeatherDatumReader).
   * 
   * @return
   */
  protected abstract WeatherObserver getWeatherObserver();

  /**
   * This method must invoke the showMessageDialog() method in the JOptionPane class, passing it the
   * text contained in about.txt.
   * 
   */
  protected void handleAbout()
  {
    JOptionPane.showMessageDialog(null, aboutButton, aboutText, JOptionPane.INFORMATION_MESSAGE);
  }

  /**
   * This method must construct an appropriate kind of WeatherDatumReader (based on the file type,
   * either .for or .obs), reset the WeatherObserver, make the WeatherObserver an observer of the
   * WeatherDatumReader, and read the file.
   */
  protected void handleLoad()
  {
    String fileName = fileField.getText();
    if (fileName.endsWith(".for"))
    {
      
    }
    else if(fileName.endsWith(".obs"))
    {
      
    }
    WeatherDatumReader reader = new WeatherDatumReader
    getWeatherObserver().reset();
    getWeatherObserver().
  }

  /**
   * Must construct the GUI components and lay them out (as illustrated in the interaction design
   * portion of this document).
   */
  @Override
  public void init()
  {
    // TODO Auto-generated method stub

  }

}
