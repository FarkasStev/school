package weatherbitmaps;

import java.awt.Container;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

import weather.WeatherObserver;
import weather.io.WeatherDatumReader;
import weather.io.WeatherForecastReader;
import weather.io.WeatherObservationReader;

public abstract class WeatherBitmapsApplication extends app.JApplication
    implements java.awt.event.ActionListener
{
  public static int WIDTH = 800;
  public static int HEIGHT = 600;
  protected static String ABOUT = "About";
  protected static String LOAD = "Load";
  private JButton aboutButton;
  private JButton loadButton;
  protected JTextField fileField;
  private String aboutText;

  /**
   * The explicit value constructor is passed the command-line arguments. It must pass them to its
   * parent's constructor. It must then perform any necessary non-GUI-related initializations.
   * (Remember that GUI-related initializations must be performed in the init() method.).
   * 
   * @param args
   *          from command line
   */
  public WeatherBitmapsApplication(String[] args)
  {
    super(args, WIDTH, HEIGHT);

    try
    {
      File aboutFile = new File("src/resources/about.txt");
      Scanner aboutScnr = new Scanner(aboutFile);
      String aboutString = "";

      while (aboutScnr.hasNext())
      {
        aboutString += aboutScnr.nextLine();
        aboutString += '\n';
      }
      aboutScnr.close();

      aboutText = aboutString;
    }
    catch (FileNotFoundException e)
    {
      JOptionPane.showMessageDialog(null, null, "Error: File Not Found: about.txt",
          JOptionPane.ERROR_MESSAGE);
    }

  }

  /**
   * Must handle the events generated by the user clicking on the About and/or Load buttons. When
   * the user clicks on the About button, this method must invoke the handleAbout() method. When the
   * user clicks on the Load button, this method must invoke the handleLoad() method.
   * 
   */
  @Override
  public void actionPerformed(ActionEvent e)
  {

    String action = e.getActionCommand();
    if (action.equals(ABOUT))
    {
      handleAbout();
    }
    else if (action.equals(LOAD))
    {
      handleLoad();
    }

  }

  /**
   * The getGUIComponent() method is invoked when the application is being layed-out. In concrete
   * specializations, this method returns the "main" JComponent (e.g., the JComponent that is used
   * to display weather information).
   * 
   * @return
   */
  protected abstract JComponent getGUIComponent();

  /**
   * The getWeatherObserver() method is invoked when the application responds to the Load button. In
   * concrete specializations, this method returns the WeatherObserver that becomes the observer of
   * the WeatherSubject (i.e., the WeatherDatumReader).
   * 
   * @return
   */
  protected abstract WeatherObserver getWeatherObserver();

  /**
   * This method must invoke the showMessageDialog() method in the JOptionPane class, passing it the
   * text contained in about.txt.
   * 
   */
  protected void handleAbout()
  {
    JOptionPane.showMessageDialog(null, aboutText, ABOUT, JOptionPane.INFORMATION_MESSAGE);
  }

  /**
   * This method must construct an appropriate kind of WeatherDatumReader (based on the file type,
   * either .for or .obs), reset the WeatherObserver, make the WeatherObserver an observer of the
   * WeatherDatumReader, and read the file.
   */
  protected void handleLoad()
  {
    WeatherDatumReader reader = null;
    String fileName = fileField.getText();
    WeatherObserver obs = getWeatherObserver();

    try
    {
      // construct the appropriate type of WeatherDatumReader
      if (fileName.endsWith(".for"))
      {
        reader = new WeatherForecastReader(new BufferedReader(new FileReader(new File(fileName))));
      }
      else if (fileName.endsWith(".obs"))
      {
        reader = new WeatherObservationReader(
            new BufferedReader(new FileReader(new File(fileName))));
      }

      // reset the WeatherObserver
      getWeatherObserver().reset();

      // make the WeatherObserver an observer of the reader
      if (reader != null)
      {
        reader.addObserver(obs);
        // read the file
        reader.readAll();
      }
      else
      {
        throw new FileNotFoundException();
      }


    }
    catch (FileNotFoundException e)
    {
      JOptionPane.showMessageDialog(null, null, "Error: File not found", JOptionPane.ERROR_MESSAGE);
    }
    catch (IOException e)
    {
      JOptionPane.showMessageDialog(null, null, "Error while reading file.",
          JOptionPane.ERROR_MESSAGE);
    }
  }

  /**
   * Must construct the GUI components and lay them out (as illustrated in the interaction design
   * portion of this document).
   */
  @Override
  public void init()
  {

    aboutButton = new JButton(ABOUT);
    aboutButton.setBounds(550, 50, 75, 20);
    aboutButton.addActionListener(this);

    loadButton = new JButton(LOAD);
    loadButton.setBounds(450, 50, 75, 20);
    loadButton.addActionListener(this);

    fileField = new JTextField();
    fileField.setBounds(200, 50, 200, 20);

    JLabel fileLabel = new JLabel();
    fileLabel.setText("File:");
    fileLabel.setBounds(150, 50, 50, 20);

    JComponent observer = getGUIComponent();
    observer.setBounds(0, 70, WIDTH, 700);

    Container frame = this.getContentPane();
    frame.setBounds(0, 0, WIDTH, HEIGHT);

    frame.add(aboutButton);
    frame.add(loadButton);
    frame.add(fileField);
    frame.add(fileLabel);
    frame.add(observer);

    frame.setVisible(true);

  }

}
