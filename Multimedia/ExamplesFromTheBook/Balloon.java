import java.awt.geom.*;
import java.util.Random;

import visual.dynamic.described.*;
import visual.statik.TransformableContent;

/**
 * A Balloon that drops to the ground
 *
 * @author  Prof. David Bernstein, James Madison University
 * @version 1.0
 */
public class Balloon extends RuleBasedSprite
{
  private double          left, speed, top;
  private int             maxY, maxX, minY;

  private static Random   rng = new Random();

  /**
   * Explicit Value Constructor
   *
   * @param content     The static content for the balloon
   * @param stageWidth  The width of the Stage
   * @param stageHeight The height of the Stage
   */
  public Balloon(TransformableContent content, 
      double stageWidth, double stageHeight)
  {
    super(content);
    Rectangle2D        bounds;       

    bounds = content.getBounds2D(false);

    maxX   = (int)(stageWidth  - bounds.getWidth());
    maxY   = (int)(stageHeight);
    minY   = (int)(-bounds.getHeight());       

    left   = rng.nextInt(maxX);
    top    = minY;
    speed  = 1 + rng.nextInt(10);

    setLocation(left, top);
  }

  //[handleTick
  /**
   * Handle a tick event (generated by the Stage)
   *
   * @param time  The current time (which is not used)
   */
  public void handleTick(int time)
  {
    Sprite   cupola;

    // Wait for the initial rendering       
    if (time < 1000) return; 

    // Check for an intersection
    cupola = null;       
    if (antagonists.size() > 0) cupola = antagonists.get(0);


    if ((cupola != null) && (intersects(cupola)))
    {
      speed = 0;
      setVisible(false);
    }

    // Update the location
    top += speed;

    if (top > maxY)
    {
      left   = rng.nextInt(maxX);
      top    = minY;
      speed  = 1 + rng.nextInt(10);
    }

    // Set the location
    setLocation(left, top);
  }
  //]handleTick
}
