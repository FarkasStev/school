import io.ResourceFinder;
import visual.dynamic.described.*;
import visual.statik.sampled.*;

/**
 * A Drop of blood in the game Flakey.
 *
 * This Sprite uses different pieces of visual content depending on its state (e.g., whether the
 * drop is forming or falling).
 *
 * @author Prof. David Bernstein, James Madison University
 * @version 1.0
 */
public class Drop extends RuleBasedSprite
{
  protected int speed, x, xStart, y, yStart, state;

  protected static ResourceFinder finder = ResourceFinder.createInstance(resources.Marker.class);
  protected static ContentFactory factory = new ContentFactory(finder);
  protected static ImageFactory imageFactory = new ImageFactory(finder);

  protected static Content[] images = factory.createContents("blood.png", 9, 4);;

  /**
   * Default Constructor.
   */
  public Drop()
  {
    super(images[0]);
    state = 0;

    x = 0;
    y = 0;
    speed = 5;
    state = 0;
  }

  /**
   * Gets the (current) visual content for this Sprite (required by Sprite).
   *
   * This class overrides the method in the parent because the visual content is state specifuc
   */
  public visual.statik.TransformableContent getContent()
  {
    return images[state];
  }

  /**
   * Handle a tick event (generated by the Stage).
   *
   * @param time The current time (in milliseconds)
   */
  public void handleTick(int time)
  {
    if (state == 8) // Separated
    {
      y += speed;

      if (y > 480)
      {
        state = 0;
        x = xStart;
        y = yStart;
      }
    }
    else // Forming
    {
      state++;
    }

    setLocation(x, y);
  }

  /**
   * Set the starting values.
   *
   * @param xStart         The intial x-coordinate
   * @param yStart         The intial y-coordinate
   * @param speed          The intial speed
   */
  public void setStartingValues(int xStart, int yStart, int speed)
  {
    this.state = 0;
    this.xStart = xStart;
    this.yStart = yStart;
    this.x = xStart;
    this.y = yStart;
    this.speed = speed;
  }
}
